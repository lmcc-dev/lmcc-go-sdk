/*
 * Author: Martin <lmccc.dev@gmail.com>
 * Co-Author: AI Assistant
 * Description: This code was collaboratively developed by Martin and AI Assistant.
 */

// Package errors provides a flexible and structured way to handle errors in Go applications.
// It extends the standard library's error handling capabilities by introducing a Coder system
// for categorized error information, automatic stack trace capturing, and enhanced formatting.
//
// 设计理念 (Design Philosophy):
//
// The core idea is to offer more context with errors beyond a simple string message.
// By associating errors with a 'Coder' (which includes an error code, HTTP status, description,
// and a reference link), applications can make more informed decisions on how to handle them.
// This package aims for clarity, control, robustness, and ease of use, while ensuring
// compatibility with standard Go error handling patterns like errors.Is and errors.As.
//
// 核心理念是提供超越简单字符串消息的更丰富的错误上下文。通过将错误与"Coder"（包含错误码、
// HTTP状态码、描述和参考链接）关联，应用程序可以就如何处理错误做出更明智的决定。
// 本包旨在实现清晰性、可控性、健壮性和易用性，同时确保与标准Go错误处理模式（如 errors.Is 和 errors.As）的兼容性。
//
// 主要功能 (Key Features):
//
//   - Coder System: Define structured error types with codes, messages, HTTP statuses, and references.
//     (Coder 系统：定义结构化的错误类型，包含错误码、消息、HTTP状态码和参考信息。)
//   - Stack Traces: Automatically capture stack traces at the point of error creation or wrapping.
//     (堆栈跟踪：在错误创建或包装时自动捕获堆栈跟踪。)
//   - Error Wrapping: Richer error wrapping capabilities than the standard library, preserving context.
//     (错误包装：比标准库更丰富的错误包装能力，保留上下文信息。)
//   - Standard Compatibility: Works seamlessly with `errors.Is`, `errors.As`, and `errors.Unwrap`.
//     (标准兼容性：与 `errors.Is`、`errors.As` 和 `errors.Unwrap` 无缝协作。)
//   - Flexible Formatting: Control error output format, including verbose stack trace printing with `%+v`.
//     (灵活格式化：控制错误输出格式，包括使用 `%+v` 打印详细的堆栈跟踪。)
//   - Error Aggregation: Support for grouping multiple errors into a single error instance using 'ErrorGroup', which is compatible with standard error handling utilities.
//     (错误聚合：支持使用 'ErrorGroup' 将多个错误分组到一个错误实例中，该实例与标准错误处理工具兼容。)
//   - Formatted Error Creation: Functions like `Errorf` and `ErrorfWithCode` leverage `fmt.Errorf` internally for message formatting and support the `%w` verb for error wrapping, ensuring behavior consistent with standard library practices. When `%w` is not used, the direct cause generated by these functions is a standard error without a distinct stack trace from this package, with the wrapper itself capturing the call-site stack.
//     (格式化错误创建：类似 `Errorf` 和 `ErrorfWithCode` 的函数内部利用 `fmt.Errorf` 进行消息格式化，并支持 `%w` 指令进行错误包装，确保行为与标准库实践一致。当未使用 `%w` 时，这些函数直接生成的 cause 是一个不从此包角度携带独立堆栈的标准错误，其包装器本身会捕获调用点堆栈。)
//
// 基本用法 (Basic Usage):
//
// Creating a new error with a message:
//
//	err := errors.New("an unexpected error occurred")
//
// Creating a new error with a formatted message:
//
//	err := errors.Errorf("failed to process request %s: %v", requestID, someError)
//
// Using Coders:
//
//	// Define a Coder
//	var ErrResourceNotFound = errors.NewCoder(10001, 404, "Resource not found")
//
//	// Create an error with the Coder
//	err := errors.NewWithCode(ErrResourceNotFound, "user 'jane' not found")
//
//	// Wrap an existing error with a Coder
//	ioErr := io.EOF
//	errWithCode := errors.WithCode(ioErr, ErrResourceNotFound)
//
// Wrapping errors:
//
//	originalErr := errors.New("database connection failed")
//	wrappedErr := errors.Wrap(originalErr, "failed to handle user request")
//	// wrappedErr.Error() -> "failed to handle user request: database connection failed"
//
// Checking error types and Coders:
//
//	if errors.Is(err, ErrResourceNotFound) { // Check if the error (or its cause) matches a Coder
//	    // Handle specific Coder
//	}
//
//	var coder errors.Coder
//	if errors.As(err, &coder) { // Extract the Coder
//	    log.Printf("Error Code: %d, Message: %s", coder.Code(), coder.String())
//	}
//
// Printing stack trace:
//
//	fmt.Printf("%+v\n", err) // Prints the error message(s) and the full stack trace(s)
//
// For more detailed examples and a list of predefined Coders, please refer to the
// specific function documentation and the `coder.go` file.
// (更多详细示例和预定义Coder列表，请参考具体函数的文档和 `coder.go` 文件。)
package errors