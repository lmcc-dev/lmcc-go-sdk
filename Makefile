# Copyright 2025 lmcc Authors. All rights reserved.
# Use of this source code is governed by a MIT style
# license that can be found in the LICENSE file.

# Default target executed when no arguments are given to make.
.DEFAULT_GOAL := all

# ==============================================================================
# Define project variables

# ROOT_PACKAGE :: The root Go package path of the project.
ROOT_PACKAGE := github.com/lmcc-dev/lmcc-go-sdk
# VERSION_PACKAGE :: The Go package path for version information.
# TODO: Create this package or adjust if versioning is handled differently.
# VERSION_PACKAGE := $(ROOT_PACKAGE)/pkg/version

# ==============================================================================
# Includes - Load common variables and specific rules.
# Order matters.

# Include common variables and functions.
include scripts/make-rules/common.mk
# Include Go specific rules.
include scripts/make-rules/golang.mk
# Include tool installation rules.
include scripts/make-rules/tools.mk
# TODO: Include other rules files as needed (e.g., copyright.mk)

# ==============================================================================
# Targets

# all: Default target. Runs format, lint, and tests.
.PHONY: all
all: format lint test tidy ## Run format, lint, tests, and tidy.

# format: Format Go source files.
.PHONY: format
format: tools.verify.goimports ## Format Go source files using gofmt, goimports, etc.
	@echo "===========> Formatting codes..."
	@$(MAKE) go.format

# lint: Run linters.
.PHONY: lint
lint: tools.verify.golangci-lint ## Run linters (golangci-lint).
	@echo "===========> Running linters..."
	@$(MAKE) go.lint

# test: Run unit tests.
.PHONY: test
test: ## Run unit tests.
	@echo "===========> Running unit tests..."
	@$(MAKE) go.test

# cover: Run unit tests and generate coverage report.
.PHONY: cover
cover: ## Run unit tests and generate coverage report.
	@echo "===========> Running unit tests with coverage..."
	@$(MAKE) go.test.cover

# tidy: Tidy go module files.
.PHONY: tidy
tidy: ## Tidy go module files (go mod tidy).
	@echo "===========> Tidying go module files..."
	@$(GO) mod tidy

# clean: Remove build artifacts.
.PHONY: clean
clean: ## Remove all files generated by the build.
	@echo "===========> Cleaning all build output..."
	@-rm -vrf $(OUTPUT_DIR)
	@echo "===========> Cleaning tools..."
	@-rm -vrf $(TOOLS_DIR)

# help: Show this help message.
.PHONY: help
help: Makefile ## Show this help message.
	@printf "\nUsage: make <TARGETS> <OPTIONS> ...\n\nTargets:\n"
	@sed -n 's/^##//p' $< | column -t -s ':' | sed -e 's/^/ /'
	@printf "\nOptions:\n"
	@sed -n 's/^# //p' $< | column -t -s ':' | sed -e 's/^/ /' | sed -e '/^Usage/d' | sed -e '/^Targets/d' | sed -e '/^Options/d'
	@echo "$$USAGE_OPTIONS"

# tools: Install all required Go tools.
.PHONY: tools
tools: ## Install all required Go tools listed in tools.mk.
	@$(MAKE) tools.install

# ==============================================================================
# Removed: Tools section moved to scripts/make-rules/tools.mk
# ==============================================================================

# TOOLS_DIR ?= $(OUTPUT_DIR)/tools
# TOOLS_BIN_DIR ?= $(TOOLS_DIR)/bin
# GOLANGCI_LINT_VERSION := v1.58.1 # Choose a specific version
# GOLANGCI_LINT := $(TOOLS_BIN_DIR)/golangci-lint

# # Ensure golangci-lint is installed
# tools.verify.golangci-lint: $(GOLANGCI_LINT) ## Verify golangci-lint is installed.
# $(GOLANGCI_LINT):
# 	@echo "===========> Installing golangci-lint $(GOLANGCI_LINT_VERSION)..."
# 	@GOBIN=$(TOOLS_BIN_DIR) $(GO) install github.com/golangci/golangci-lint/cmd/golangci-lint@$(GOLANGCI_LINT_VERSION) 