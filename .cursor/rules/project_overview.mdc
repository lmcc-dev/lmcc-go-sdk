---
description: 
globs: 
alwaysApply: false
---
# lmcc-go-sdk Project Overview

## Project Goal
This project, `lmcc-go-sdk`, aims to create a foundational Go framework (SDK) to accelerate the development of robust and scalable Go applications.

## Core Inspiration and Reference
The SDK heavily leverages best practices and foundational code inspired by the projects within the **`marmotedu` organization**. The source code for these reference projects is available locally at the following absolute path (outside the current workspace):
`/Users/martinguo/Documents/MCP/marmotedu`

When developing features or understanding design patterns, refer to the code in the `marmotedu` directory, particularly projects like `iam`, `miniblog`, and `superproj`. **Do not copy code directly without understanding and adapting it**. Treat it as a primary reference for high-quality Go practices.

## Key Requirements
Detailed requirements are documented in:
- [requirements_en.md](mdc:docs/requirements/requirements_en.md) (English Version)
- [requirements_zh.md](mdc:docs/requirements/requirements_zh.md) (中文版 - 主要参考)

Core functional areas include:
- Configuration Management
- Structured Logging
- Enhanced Error Handling (compatible with `pkg/errors`)
- Database Abstraction
- API Foundation (Routing, Middleware)
- Common Utilities
- API Documentation (Swagger/OpenAPI via `go-swagger`)
- Internationalization (i18n via `nicksnyder/go-i18n/v2`)

## Documentation and Logging Language

**Strict Requirement:** All project documentation within the `docs/` directory, including requirements ([requirements_zh.md](mdc:docs/requirements/requirements_zh.md)), the development plan ([development_plan.md](mdc:docs/development_plan.md)), and all development logs in [docs/devlogs/](mdc:docs/devlogs), **MUST** be written primarily in **Chinese**. English documentation ([requirements_en.md](mdc:docs/requirements_en.md)) serves as a secondary reference.

## Planned Project Structure
The project will follow a standard Go project layout, similar to `marmotedu/iam` or `marmotedu/miniblog`:
- `cmd/`: Main application binaries (if any examples are built on the SDK).
- `pkg/`: Publicly shared library code (the core SDK components). This is the primary location for SDK code.
- `internal/`: Private helper code used by `pkg/` or `cmd/`.
- `configs/`: Example or default configuration files.
- `scripts/`: Build, test, and utility scripts.
- `api/`: OpenAPI/Swagger specifications and related generated code.
- `docs/`: Project documentation (including [requirements_en.md](mdc:docs/requirements/requirements_en.md) and [requirements_zh.md](mdc:docs/requirements/requirements_zh.md)).
- `test/`: Integration and end-to-end tests.
- `examples/`: Example applications demonstrating SDK usage.

## Coding Standards & Practices
- Adhere strictly to the Uber Go Style Guide.
- Include bilingual (English and Chinese) comments for all public APIs, complex logic, and struct fields.
- Follow Conventional Commits specification for Git commit messages (must be in English).
- Use Go Modules for dependency management.
- Strive for high test coverage.
- Prioritize using stable, well-maintained third-party libraries over inventing new solutions (e.g., using `nicksnyder/go-i18n` for i18n).

## Development Workflow: Task Logs

**Strict Requirement:** Every significant development task (e.g., implementing a feature from [requirements_en.md](mdc:docs/requirements/requirements_en.md), fixing a major bug) **MUST** have a corresponding development log file in the [docs/devlogs/](mdc:docs/devlogs) directory.

- **File Naming:** Use descriptive names, preferably linking to the requirement ID or issue number (e.g., `fr001-config-management.md`, `bugfix-auth-issue-123.md`).
- **Content:** Each log file should track the specific task's objective, plan, sub-tasks, relevant code snippets, discussions, decisions made, problems encountered, and solutions found.
- **Process:** Before starting work on a task, ensure its log file exists or create it. All subsequent communication and code changes related to that task should reference and update this log file. This ensures focus and traceability.

**AI Assistant Responsibility:** Always ask for or identify the relevant devlog file when working on a specific task. Ensure all context and decisions are captured within that file.
